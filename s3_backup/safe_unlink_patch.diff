diff --git a/s3_backup/manager.py b/s3_backup/manager.py
index 9c0b123..b3a5d1a 100644
--- a/s3_backup/manager.py
+++ b/s3_backup/manager.py
@@ -244,8 +244,9 @@ class S3BackupManager:
         if orphaned:
             logger.info(f"Cleaning up {len(orphaned)} orphaned archive(s) from previous runs...")
             for archive in orphaned:
-                try:
-                    # Skip archives that may still be in use
-                    if archive.name.endswith(".part") or archive.stat().st_size == 0:
-                        continue
-                    archive.unlink()
-                    logger.debug(f"Removed leftover archive: {archive.name}")
-                except FileNotFoundError:
-                    logger.debug(f"Already removed: {archive}")
-                except Exception as e:
-                    logger.warning(f"Could not remove {archive}: {e}")
+                # Skip archives that may still be in use
+                try:
+                    if archive.name.endswith(".part") or archive.stat().st_size == 0:
+                        continue
+                    self.safe_unlink(archive)
+                except Exception as e:
+                    logger.warning(f"Could not remove {archive}: {e}")
@@ -751,17 +752,10 @@ class S3BackupManager:
             # Verify
             verify_result = self.verify_archive(session_id, year)
             
             if not verify_result.verified:
                 return ArchiveResult(
                     success=False,
                     session_id=session_id,
                     archive_path=archive_path,
                     s3_key=s3_key,
                     error=f"Verification failed: {verify_result.error}"
                 )
-            
-            # Clean up temporary archive only if it still exists
-            if cleanup_archive:
-                try:
-                    if archive_path and archive_path.exists():
-                        archive_path.unlink()
-                        logger.info(f"üßπ Deleted local archive: {archive_path}")
-                    else:
-                        logger.debug(f"Archive already cleaned up or missing: {archive_path}")
-                except Exception as e:
-                    logger.warning(f"‚ö†Ô∏è Cleanup skipped for {archive_path}: {e}")
+            # Clean up temporary archive using safe unlink
+            if cleanup_archive and self.safe_unlink(archive_path):
+                logger.info(f"üßπ Deleted local archive: {archive_path}")
@@ -791,6 +785,27 @@ class S3BackupManager:
             session_db.close()
     
+
+    def safe_unlink(self, path: Optional[Path]) -> bool:
+        """Safely delete a file if it exists, with logging and exception handling.
+
+        Args:
+            path: Path to the file to delete
+
+        Returns:
+            True if deleted, False otherwise.
+        """
+        if not path:
+            return False
+        try:
+            if path.exists():
+                path.unlink()
+                logger.debug(f"üßπ Deleted: {path}")
+                return True
+            else:
+                logger.debug(f"Already deleted or missing: {path}")
+                return False
+        except Exception as e:
+            logger.warning(f"‚ö†Ô∏è Failed to delete {path}: {e}")
+            return False
+
     @staticmethod
     def _format_bytes(bytes_size: int) -> str:
         """Format bytes to human readable string."""
diff --git a/s3_backup/cli.py b/s3_backup/cli.py
index 91cf3a3..a5cb4f7 100644
--- a/s3_backup/cli.py
+++ b/s3_backup/cli.py
@@ -78,13 +78,16 @@ def cleanup(ctx):
         if not click.confirm("\nDelete these files?"):
             click.echo("Cancelled.")
             return
         
         # Delete
         deleted = 0
-        for archive in archives:
-        try:
-            if archive.exists():
-                archive.unlink()
-                deleted += 1
-            else:
-                click.echo(f"‚ö†Ô∏è Already gone: {archive.name}")
-        except Exception as e:
-            click.echo(f"‚ùå Failed to delete {archive.name}: {e}")
+        for archive in archives:
+            try:
+                if backup_manager.safe_unlink(archive):
+                    deleted += 1
+                else:
+                    click.echo(f"‚ö†Ô∏è Skipped or missing: {archive.name}")
+            except Exception as e:
+                click.echo(f"‚ùå Failed to delete {archive.name}: {e}")
+
+        click.echo(f"\n‚úì Deleted {deleted} file(s), freed {format_bytes(total_size)}")
